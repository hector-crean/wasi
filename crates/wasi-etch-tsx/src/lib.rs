use etch_tsx::pipeline::Pipeline;
use etch_tsx::visitor::framer_motion_visitor::{AnimationConfig, FramerMotionVisitor};
use etch_tsx::visitor::inject_callbacks_visitor::Callback;
use etch_tsx::visitor::inject_shadcn_ui_visitor::InjectShadcnUiVisitor;
use etch_tsx::visitor::inject_uuid_visitor::{InjectUuidPolicy, InjectUuidVisitor};
use etch_tsx::visitor::nextjs_visitor::Runtime;
use etch_tsx::visitor::{
  inject_callbacks_visitor::InjectCallbacksVisitor, inject_shadcn_ui_visitor::ComponentWrapper,
  nextjs_visitor::NextjsVisitor,
};
use etch_tsx::error::TsxError;


// This import will be generated by wit-bindgen
// It allows us to define how our Rust code maps to the WIT interface
wit_bindgen::generate!({
    path: "wit",
    world: "etch-tsx",
});



pub struct TsxPipeline {
    str: String,
}

impl TsxPipeline {
    pub fn new(str: String) -> Self {
        Self { str }
    }
  pub fn run(&self) -> Result<String, TsxError> {
    let mut pipeline = Pipeline::new();

    pipeline
      .add_visitor(InjectUuidVisitor::new(InjectUuidPolicy::KeepExisting));

    let tsx = pipeline.run(self.str.clone())?;
    Ok(tsx)
  }
}



impl exports::wasi::etch_tsx::pipeline::Guest for TsxPipeline {
  type TsxPipeline = TsxPipeline;
 
}

// Implement the resource methods
impl exports::wasi::etch_tsx::pipeline::GuestTsxPipeline for TsxPipeline {
  fn new(input: String) -> Self {
    Self { str: input }
  }

  // Implement the run method
  fn run(&self) -> Result<String, exports::wasi::etch_tsx::pipeline::TsxError> {
      // Call your existing implementation
      self.run().map_err(|e| {
          // Map your error type to the WIT-defined error type
          // You'll need to implement this conversion based on your error types
          match e {
              TsxError::ParseError(_) => exports::wasi::etch_tsx::pipeline::TsxError::ParseError,
              TsxError::IoError(_) => exports::wasi::etch_tsx::pipeline::TsxError::IoError,
              TsxError::FromUtf8Error(_) => exports::wasi::etch_tsx::pipeline::TsxError::FromUtf8Error,
              TsxError::RawHtmlError(_) => exports::wasi::etch_tsx::pipeline::TsxError::RawHtmlError,
              // Map other error variants as needed
          }
      })
  }
}

export!(TsxPipeline);
